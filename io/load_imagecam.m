function  data  = load_imagecam(conn, type, station, typefusion, timestamp, error)

%LOAD_IMAGECAM this function is used for querying images to be merged.
%
%   Input:
%   conn: Database connection which must have been previously created.
%   type: Cell array with the image type names.
%   station: station name.
%   typefusion: It's the type of images to be merged. The values you can
%               take: Rectified and oblique.
%   timestamp: Vector with values of the timestamp for the search.
%   error: This is the error in the timestamp permitted in the search (minutes).
%
%   Output:
%   data: cell array with these elements:
%         {image name, image path, timestamp, camera}
%
%         The rows are ordered for merging.
%
%   Example:
%   data  = load_imagecam(conn,{'snap', 'timex'}, 'CARTAGENA', 'oblique',[734229.4583333334;734229.8541666666;734231.4791666666], 3);
%
%   See also LOAD_ALLIMAGE, LOAD_NEARESTIMAGE, LOAD_FUSION,
%   LOAD_CALIBRATION, LOAD_roi

% Written by 
% Sebastian Munera Alvarez and 
% Cesar Augusto Cartagena Ocampo 
% for the HORUS Project
% Universidad Nacional de Colombia
%   Copyright 2011 HORUS
%   $Date: 2011/07/22 9:50 $

try
    station = upper(station);    
    %reboot connection to the database if necessary
    [conn status] = renew_connection_db(conn);
    
    if status == 1
        return
    end
    
    error = error / (24 * 60);
    EPS = 1 / (24 * 60 * 60);
    
    data =cell(0);
    for i=1:length(timestamp)
        
        try %% Cambiar timestamp ya que puede no ser exacto
            
            query_numcam = ['SELECT COUNT(camera) FROM camerabyfusion_' lower(station) ' WHERE station LIKE "' ...
                station '" AND idfusion = (SELECT id FROM fusion_' lower(station) ' WHERE type LIKE "' ...
                typefusion '" AND timestamp <= ' num2str(timestamp(i,1) + EPS,17) ' ORDER BY timestamp DESC LIMIT 1)'];
            cursor_numcam = exec(conn, query_numcam);
            cursor_numcam = fetch(cursor_numcam);
            if strcmpi(cursor_numcam.Data{1,1}, 'No Data') || isfloat(cursor_numcam.Data)
                data = [];
                continue;
            end
            data_numcam = get(cursor_numcam, 'Data');
            for j=1:length(type)
                
                if strcmpi(typefusion, 'oblique')
                    query = ['SELECT DISTINCT filename, path, timestamp, camera '...
                        'FROM (SELECT DISTINCT filename, path, timestamp, camera, cameraorder.sequence AS sequence '...
                        'FROM image_' lower(station) ' NATURAL JOIN obliqueimage_' lower(station) ' JOIN ( '...
                        'SELECT camera as camerafusion, sequence '...
                        'FROM camerabyfusion_' lower(station) ' '...
                        'WHERE station LIKE "' station '" AND idfusion = ('...
                        'SELECT id '...
                        'FROM fusion_' lower(station) ' '...
                        'WHERE type LIKE "' typefusion '" AND timestamp <= ' num2str(timestamp(i,1) + EPS,17) ' '...
                        'ORDER BY timestamp DESC LIMIT 1) '...
                        'ORDER BY sequence) AS cameraorder '...
                        'WHERE station LIKE "' station '" AND camera  IN (cameraorder.camerafusion) AND type IN ( SELECT idtype '...
                        'FROM imagetype_' lower(station) ' '...
                        'WHERE name LIKE ("' char(type(j)) '") ) '...
                        'AND ismini = 0 '...
                        'AND timestamp BETWEEN ' num2str(timestamp(i,1) - error - EPS,17) ' '...
                        'AND ' num2str(timestamp(i,1) + error + EPS,17) ' '...
                        'ORDER BY ABS(timestamp - ' num2str(timestamp(i,1),17) '), sequence LIMIT 0, '...
                        num2str(cell2mat(data_numcam)) ') AS images '...
                        'ORDER BY images.sequence'];
                else
                    query = ['SELECT DISTINCT filename, path, timestamp, camera '...
                        'FROM (SELECT DISTINCT filename, path, timestamp, camera, cameraorder.sequence AS sequence '...
                        'FROM image_' lower(station) ' NATURAL JOIN (SELECT filename, camera, station '...
                        'FROM rectifiedimage_' lower(station) ' JOIN calibration_' lower(station) ' '...
                        'WHERE calibration = idcalibration) AS Rectified '...
                        'JOIN ( '...
                        'SELECT camera as camerafusion, sequence '...
                        'FROM camerabyfusion_' lower(station) ' '...
                        'WHERE station LIKE "' station '" AND idfusion = ('...
                        'SELECT id '...
                        'FROM fusion_' lower(station) ' '...
                        'WHERE type LIKE "' typefusion '" AND timestamp <= ' num2str(timestamp(i,1) + EPS,17) ' '...
                        'ORDER BY timestamp DESC LIMIT 1) '...
                        'ORDER BY sequence) AS cameraorder '...
                        'WHERE station LIKE "' station '" AND camera  IN (cameraorder.camerafusion) AND type IN ( SELECT idtype '...
                        'FROM imagetype_' lower(station) ' '...
                        'WHERE name LIKE ("' char(type(j)) '") ) '...
                        'AND ismini = 0 '...
                        'AND timestamp BETWEEN ' num2str(timestamp(i,1) - error - EPS,17) ' '...
                        'AND ' num2str(timestamp(i,1) + error + EPS,17) ' '...
                        'ORDER BY ABS(timestamp - ' num2str(timestamp(i,1),17) '), sequence LIMIT 0, '...
                        num2str(cell2mat(data_numcam)) ') AS images '...
                        'ORDER BY images.sequence'];
                end
                cursor = exec(conn, query);
                cursor = fetch(cursor);
				if strcmpi(cursor.Data{1,1}, 'No Data') || isfloat(cursor.Data)
					continue;
				end
                image = get(cursor, 'Data');
                [row col]=size(image);
                if row == cell2mat(data_numcam)
                    data(end+1:end+row,1:col) = image;
                end
            end
        catch e
            disp([dberror('select') e.message]);
        end
        
    end
    
catch e
    disp(e.message)
end

end